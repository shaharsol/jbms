version: '3.8'
services:
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  users-service:
    postgres:
      image: postgres
      restart: always
      environment:
        # You can set the value of environment variables
        # in your docker-compose.yml file
        # Our Node app will use these to connect
        # to the database
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=postgres
      ports:
        # Standard port for PostgreSQL databases
        - "5432:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
      # volumes:
        # When the PostgresSQL container is started it will run any scripts
        # provided in the `docker-entrypoint-initdb.d` directory, this connects
        # our seed file to that directory so that it gets run
        # - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql
    # These are the configurations for our Node app
    # When Docker Compose starts this container it will automatically
    # use the Dockerfile in the directory to configure it
    users-service:
      build: ./users-service
      depends_on:
        # Our app does not work without our database
        # so this ensures our database is loaded first
        postgres:
          condition: service_healthy
      ports:
        - "3001:3000"
      volumes:
        # Maps our current project directory `.` to
        # our working directory in the container
        - ./:/usr/src/app/
        # node_modules workaround for volumes
        # https://stackoverflow.com/a/32785014
        - /usr/src/app/node_modules
      environment:
        - DB_SCHEMA=postgres
        - DB_USER=admin
        - DB_PASSWORD=password
        - DB_HOST=postgres
        - DB_PORT=5432
        - APP_PORT=3000
        - HOST_NAME=0.0.0.0
        - DATABASE_URL=postgres://admin:password@postgres:5432/postgres
  tasks-service:
    postgres:
      image: postgres
      restart: always
      environment:
        # You can set the value of environment variables
        # in your docker-compose.yml file
        # Our Node app will use these to connect
        # to the database
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=postgres
      ports:
        # Standard port for PostgreSQL databases
        - "5433:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
      # volumes:
        # When the PostgresSQL container is started it will run any scripts
        # provided in the `docker-entrypoint-initdb.d` directory, this connects
        # our seed file to that directory so that it gets run
        # - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql
    # These are the configurations for our Node app
    # When Docker Compose starts this container it will automatically
    # use the Dockerfile in the directory to configure it
    tasks-service:
      build: ./tasks-service
      depends_on:
        # Our app does not work without our database
        # so this ensures our database is loaded first
        postgres:
          condition: service_healthy
      ports:
        - "3002:3000"
      volumes:
        # Maps our current project directory `.` to
        # our working directory in the container
        - ./:/usr/src/app/
        # node_modules workaround for volumes
        # https://stackoverflow.com/a/32785014
        - /usr/src/app/node_modules
      environment:
        - DB_SCHEMA=postgres
        - DB_USER=admin
        - DB_PASSWORD=password
        - DB_HOST=postgres
        - DB_PORT=5432
        - APP_PORT=3000
        - HOST_NAME=0.0.0.0
        - DATABASE_URL=postgres://admin:password@postgres:5432/postgres
  ui-service:
    build: ./ui-service
    ports:
      - "3000:3000"
    volumes:
      # Maps our current project directory `.` to
      # our working directory in the container
      - ./:/usr/src/app/
      # node_modules workaround for volumes
      # https://stackoverflow.com/a/32785014
      - /usr/src/app/node_modules
    environment:
      - APP_PORT=3000
      - HOST_NAME=0.0.0.0
      - USERS_SERVICE_HOST=host.docker.internal
      - USERS_SERVICE_PORT=3001
      - TASKS_SERVICE_HOST=host.docker.internal
      - TASKS_SERVICE_PORT=3002
