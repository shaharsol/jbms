version: '3.8'
services:
  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the
  # address of this container.
  postgres:
    image: postgres
    restart: always
    environment:
      # You can set the value of environment variables
      # in your docker-compose.yml file
      # Our Node app will use these to connect
      # to the database
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      # Standard port for PostgreSQL databases
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    # volumes:
      # When the PostgresSQL container is started it will run any scripts
      # provided in the `docker-entrypoint-initdb.d` directory, this connects
      # our seed file to that directory so that it gets run
      # - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  users-service:
    build: .
    depends_on:
      # Our app does not work without our database
      # so this ensures our database is loaded first
      postgres:
        condition: service_healthy
    ports:
      - "3001:3000"
    volumes:
      # Maps our current project directory `.` to
      # our working directory in the container
      - ./:/usr/src/app/
      # node_modules workaround for volumes
      # https://stackoverflow.com/a/32785014
      - /usr/src/app/node_modules
    environment:
      - DB_SCHEMA=postgres
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_HOST=postgres
      - DB_PORT=5432
      - APP_PORT=3000
      - HOST_NAME=0.0.0.0
      - DATABASE_URL=postgres://admin:password@postgres:5432/postgres
